
# -*- coding: utf-8 -*-


"""Server for multithreaded (asynchronous) callculator application."""
from socket import AF_INET, socket, SOCK_STREAM 
from threading import Thread


def accept_incoming_connections():
    """Sets up handling for incoming clients."""
    while True:
        client, client_add = SERVER.accept()
        print("%s:%s has connected." % client_add)
        client.send(bytes("WELCOME by MATH  ^_^!", "utf8"))
        client.send(bytes("Plz Enter Your Name:", "utf8"))
        addresses[client] = client_add
        Thread(target=handle_client, args=(client,)).start()


def handle_client(client):  # Takes client socket as argument.
    """Handles a single client connection."""

    name = client.recv(BUFSIZ).decode("utf8")
     
    welcome = 'Welcome %s!' % name
    client.send(bytes(welcome, "utf8"))
    clients[client] = name

    while True:
        client.send(bytes("\n\nEnter an expression in format [A operator B] \n (where A and B are any integers and 'operator' is +,-,* or /", "utf8"))
        client.send(bytes('\n\nIf you ever want to quit, type {quit} to exit.', "utf8"))
        msg = client.recv(BUFSIZ)
        var=[]
        if msg != bytes("{quit}", "utf8"):
            #client.send(msg, name+": ")
            inputs=(msg.decode("utf-8"))
        #broadcast(bytes("inputs " %inputs, "utf8"))
            if (inputs.find('*')!=-1):
                var=inputs.split('*')
                ans=int(var[0])*int(var[1])
                client.send(bytes("%s * %s = %d " %(var[0],var[1],ans), "utf8"))
            elif (inputs.find('+')!=-1):
                var=inputs.split('+')
                ans=int(var[0])+int(var[1])
                client.send(bytes("%s + %s = %d " %(var[0],var[1],ans), "utf8"))
            elif(inputs.find('-')!=-1):
                var=inputs.split('-')
                ans=int(var[0])-int(var[1])
                client.send(bytes("%s - %s = %d " %(var[0],var[1],ans), "utf8"))
            elif(inputs.find('/')!=-1):
                var=inputs.split('/')
                ans=int(var[0])/int(var[1])
                client.send(bytes("%s / %s = %d " %(var[0],var[1],ans), "utf8"))
            elif():
                client.send(bytes("Enter a valid operation", "utf8"))
                ans=0
                client.close()
                SERVER.close()
                break
            
            #print("\n\n  ANS:",ans)
            
        else:
            client.send(bytes("{quit}", "utf8"))
            client.close()
            del clients[client]
            SERVER.close()
            break

        
clients = {}
addresses = {}

HOST = ''
PORT = 33000
BUFSIZ = 1024
ADDR = (HOST, PORT)

SERVER = socket(AF_INET, SOCK_STREAM)
SERVER.bind(ADDR)

if __name__ == "__main__":
    SERVER.listen(5)
    print("Server connected...")
    ACCEPT_THREAD = Thread(target=accept_incoming_connections)
    ACCEPT_THREAD.start()
    ACCEPT_THREAD.join()
    SERVER.close()
